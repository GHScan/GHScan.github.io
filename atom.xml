<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Scan的轮子工坊</title>
  <subtitle>记踩过的坑和不成熟的想法</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wbscan.com/"/>
  <updated>2016-05-07T21:13:56.670Z</updated>
  <id>http://blog.wbscan.com/</id>
  
  <author>
    <name>Scan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>讲下怎么用Hexo+NexT搭这个博客</title>
    <link href="http://blog.wbscan.com/2016/05/08/HowToSetupTheHexoBasedBlog/"/>
    <id>http://blog.wbscan.com/2016/05/08/HowToSetupTheHexoBasedBlog/</id>
    <published>2016-05-07T20:15:18.000Z</published>
    <updated>2016-05-07T21:13:56.670Z</updated>
    
    <content type="html">&lt;p&gt;我自己想搭博客很久了，之前是不会 Web 编程；后来终于学会做网站，但仍然嫌麻烦不想自己做博客。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;考虑到，文章的托管和备份一定要靠谱，一番考察，还是觉得用 &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Pages&lt;/a&gt; 最省事；而基于 GitHub Pages 的静态网站方案中，对比&lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt; 和 &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; ，后者诞生得晚、活跃的主题多，安装和部署都更简单。在 Hexo 的主题中，&lt;a href=&quot;http://theme-next.iissnan.com/tag-plugins.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt; (&lt;a href=&quot;http://notes.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;)又比所有的竞争对手的成熟度都要高一个档次，于是最终方案就是 GitHub Pages + Hexo + NexT. &lt;/p&gt;
&lt;p&gt;我自己看了多少乱七八糟的教程和主题按下不表，这是推荐路线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先看&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Pages&lt;/a&gt;的文档，至少用它托管一个空的 index.html  。成功过后，你就能通过&lt;code&gt;http://username.github.io&lt;/code&gt;来访问这个只有空的 index.html 页面的静态网站了。&lt;/li&gt;
&lt;li&gt;注册一个域名，添加 CNAME record 重定向到你刚生成的由 GitHub 托管的网站。另外在 Repo 中也需要做点事： &lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using a custom domain with GitHub Pages&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;了解一下这个静态博客生成器，然后按照 Doc 在本机初始化一个博客。此时如果你运行 hexo 命令，在这个初始博客模板上生成静态网站，push 到前面创建的 GitHub Pages 的 Repo 的话，那其实一个简陋的博客已经完工了，以后每次发新文章，直接&lt;code&gt;hexo new &amp;quot;post_name&amp;quot;&lt;/code&gt;就可以了。这篇教程写得很好：&lt;a href=&quot;https://xuanwo.org/2015/03/26/hexo-intor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;史上最详细的Hexo博客搭建图文教程&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;上面生成的博客太简陋，所以我们需要用 Hexo 的模板。Github 上 Star 最多的是&lt;a href=&quot;http://theme-next.iissnan.com/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NextT&lt;/a&gt;，确实很专业，外观够炫 (&lt;a href=&quot;http://notes.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;)，功能也很丰富，改几行配置文件就能完成很多事情：&lt;ul&gt;
&lt;li&gt;多说/Disqus 评论&lt;/li&gt;
&lt;li&gt;百度/腾讯/Google 统计&lt;/li&gt;
&lt;li&gt;微信打赏&lt;/li&gt;
&lt;li&gt;微信公众号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到这里就全部完工了，以后每次添加新文章，在 Hexo 的模板 Repo 里面&lt;code&gt;hexo new &amp;quot;post_name&amp;quot;&lt;/code&gt;，然后运行&lt;code&gt;hexo generate&lt;/code&gt;得到静态网站，再 push 到&lt;code&gt;https://github.com/username/username.github.io&lt;/code&gt; (或者&lt;code&gt;hexo deploy&lt;/code&gt;)，博客内容就更新了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我自己想搭博客很久了，之前是不会 Web 编程；后来终于学会做网站，但仍然嫌麻烦不想自己做博客。&lt;br&gt;
    
    </summary>
    
      <category term="Engineering" scheme="http://blog.wbscan.com/categories/Engineering/"/>
    
    
      <category term="Web" scheme="http://blog.wbscan.com/tags/Web/"/>
    
      <category term="GitHub" scheme="http://blog.wbscan.com/tags/GitHub/"/>
    
  </entry>
  
</feed>
